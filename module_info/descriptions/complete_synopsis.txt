 in the script: src/abstract_pdfs/AbstractPDFManager.py
 dubbed with the title: AbstractPDFManager_Class_Description
 was described as: The script creates a Python class called AbstractPDFManager within the abstract_pdfs package. The class is responsible for managing operations on PDF files such as file ingestion, deduplication, splitting, Optical Character Recognition (OCR) conversion, and text extraction with awareness of slices or parts of the PDF document.*n**n*The class uses utilities provided in the same package, such as various tools for handling PDFs and extracting text from them, as well as the SliceManager class for slice-aware column detection. AbstractPDFManager takes a path to a PDF file as an input, and provides methods to split the PDF into individual pages, convert the pages into images, extract text from images, run bulk OCR extraction, run slice-aware OCR, and handle manifests. The last two methods orchestrate the complete process of text extraction from PDFs: one performing the basic extraction (split, conversion, extraction), and the other doing the full pipeline, optionally including the slice-aware OCR.*n**n*Examples of how to use the class are provided in the doc string.

/n/n in the script: src/abstract_pdfs/SliceManager.py
 dubbed with the title: SliceManager_Class_Description
 was described as: The provided script creates a SliceManager class as part of the 'abstract_pdfs' Python package. This class manages operations for Optical Character Recognition (OCR) on PDF files, focusing specifically on column-aware OCR and text cleaning. The SliceManager class uses different OCR engines, including Tesseract, EasyOCR, and PaddleOCR, with each engine having its own output directory and collated results. The SliceManager class initiation takes a PDF file path, an output root, and the OCR engines to be used as inputs. The class provides methods to convert a single PDF page to PNG, perform OCR and text cleaning on an image, process a single PDF page for a single OCR engine, and run a full pipeline for a specific OCR engine. It also provides a method to run the entire PDF through all configured OCR engines.

/n/n in the script: src/abstract_pdfs/__init__.py
 dubbed with the title: Init_Py_Script_in_Abstract_PDFs_Package_Overview
 was described as: The provided script '__init__.py' from the abstract_pdfs package is responsible for the initialization of the package, importing the necessary modules and classes required within the module. It imports everything from 'pdf_utils', which likely include utilities for handling .pdf files; from 'imports', which are likely project-specific modules or libraries; from 'SliceManager', which is a class dedicated to managing operations for Optical Character Recognition (OCR) on PDF files with specific focus on column-aware OCR and text cleaning; and from 'AbstractPDFManager', which is a class for managing operations on PDF files such as file ingestion, deduplication, splitting, OCR conversion, and text extraction. By doing so, it makes these classes and functions available for use within the package.

/n/n in the script: src/abstract_pdfs/imports/__init__.py
 dubbed with the title: Init_Py_Script_for_Imports_and_Manifest_Utils_in_Abstract_PDFs_Package_Description
 was described as: The presented script '__init__.py' from the abstract_pdfs package, is written to initialize the package 'abstract_pdfs'. It is relatively simple and only contains two lines of code. Firstly it imports from '.imports', which likely includes various necessary project-specific modules or libraries required within this package. Secondly it imports from '.manifest_utils', which would be necessary for handling and managing manifests (structured data describing package contents) within the package. Hence, it makes the imports and manifest_utils modules functionalities accessible for use within 'abstract_pdfs' package.

/n/n in the script: src/abstract_pdfs/imports/imports.py
 dubbed with the title: Imports_Py_Script_in_Abstract_PDFs_Package_Description
 was described as: The chunk_data provides a script from 'imports.py' located in 'src/abstract_pdfs/imports' of the 'abstract_pdfs' package v0.0.0.001. The script primarily contains import statements from various Python packages and modules. It extensively uses hints for improved type-checking and to annotate the types of variables used in the code. It imports various elements such as Image from PIL (Python Imaging Library) for image processing, Path from pathlib for filesystem path handling, and more from other packages like abstract_ocr, pdf2image, os, shutil, hashlib, re, logging, PyPDF2, and abstract_utilities. The purpose of these imports, as can be inferred from their individual capacities, would be to carry out various image processing, OCR conversions, PDF handling, file manipulation, logging, regular expressions, and other utility tasks. It also sets up a logger with the name 'abstract_pdf', which could be used to log events or errors while the module functions are performed.

/n/n in the script: src/abstract_pdfs/imports/manifest_utils.py
 dubbed with the title: Manifest_Utils_Py_Script_Description_in_Abstract_PDFs_Package
 was described as: The provided script is manifest_utils.py, a part of the abstract_pdfs package, which primarily contains functions related to handling and managing manifests (structured data describing package contents). The functions include getting the path and directory of a PDF, getting the path of a manifest, loading an existing manifest, and saving a manifest data. The get_pdf_path and get_pdf_dir functions either return the path to the PDF file or obtain the directory of the PDF respectively. The get_manifest_path function generates the path for the manifest file corresponding to a PDF. The load_manifest function reads a manifest file and returns the JSON data. The function takes either a directory containing PDFs or the actual path to a manifest as input. If a manifest doesn't exist in the provided location, it creates an empty manifest. The save_manifest_data function writes data to a manifest file. Directed by the optional 'override' parameter, if set to 'True', the function reloads an existing manifest within the given directory and otherwise, it creates an empty file.

/n/n in the script: src/abstract_pdfs/pdf_utils/__init__.py
 dubbed with the title: Initialization_of_PDF_Utils_in_Abstract_PDFs
 was described as: The provided chunk is a part of '__init__.py' in the 'pdf_utils' subpackage of 'abstract_pdfs'. This script is responsible for initializing the 'pdf_utils' subpackage within 'abstract_pdfs', allowing for access to utilities related to PDF handling. The script imports everything from 'pdf_to_text' and 'pdf_tools'. 'pdf_to_text' is most likely a module that provides functionalities for converting PDF files to text, which would be vitally useful when working with Optical Character Recognition techniques, and 'pdf_tools' likely provides a set of tools and utilities necessary for performing various operations on PDF files. By importing everything from these two modules, the script makes available a range of PDF-to-text conversion and PDF manipulation functionalities for use within the 'pdf_utils' subpackage.

/n/n in the script: src/abstract_pdfs/pdf_utils/imports.py
 dubbed with the title: Imports_Py_Script_in_PDF_Utils_Directory_Description
 was described as: The provided data is a single line of code from 'imports.py' within the 'src/abstract_pdfs/pdf_utils' directory of the 'abstract_pdfs' package. The line of code essentially imports all modules and classes from the parent 'imports' directory. The 'imports' directory, based on prior descriptions, seems to contain import statements from various Python packages and extensive usage of type hints that serve as annotations for variable types in the code. The imported modules seem instrumental for image processing, filesystem path handling, OCR conversions, PDF handling, regular expressions, logging, file handling, and other utility tasks. By executing this import, this script allows access to a vast collection of functionalities that can be used for managing and processing PDFs in the 'pdf_utils' subpackage.

/n/n in the script: src/abstract_pdfs/pdf_utils/pdf_to_text.py
 dubbed with the title: PDF_To_Text_Script_in_PDF_Utils_of_Abstract_PDFs_Package_Description
 was described as: The furnished script, `pdf_to_text.py`, is a part of the `abstract_pdfs` package, specifically located in 'pdf_utils' directory. This script provides a core set of functions geared towards the conversion of pdf files to text. It comprehensively employs functions from Python's built-in modules such as `hashlib`, `os`, `re`, and `PyPDF2`.*n**n*Key functionalities include:*n*- `is_pdf_file` function to verify if a file is a pdf based on its extension.*n*- `get_file_hash` function to calculate the hash of a file's contents. *n*- `get_preferred_filename` function to find an unsuffixed or lower-numbered name among duplicates. *n*- `get_pdf_obj` function to return a PyPDF2.PdfReader object from a pdf file path.*n*- `save_pdf` function to write a PyPDF2 writer object to disk.   *n*- `split_pdf` function to split a pdf into separate pages, each as a separate file.  *n*- `pdf_to_text_in_folders` function to convert PDFs to text and save results in individual folders.*n**n*The script uses the `PyPDF2` library to split a PDF into separate page files. It also uses `os` to create directories for storing the split pages, images, and extracted text. It handles errors effectively and warns the user in case any file encounters an error while processing.*n**n*This script appears to fit into the larger `abstract_pdfs` package by providing crucial utilities for handling and converting pdf files to text feeding into the core functionalities of the package.

/n/n in the script: src/abstract_pdfs/pdf_utils/pdf_tools.py
 dubbed with the title: PDF_Tools_Script_in_Abstract_PDFs_Package_Description
 was described as: The script pdf_tools.py from the 'abstract_pdfs' package offers standalone utilities for PDF page extraction, image conversion, and text preprocessing. The script relies on dependencies such as PyPDF2, pdf2image, PIL, abstract_utilities, abstract_ocr. The script defines two main functions: 'images_to_pdf' and 'process_pdf'. The 'images_to_pdf' function combines multiple images into a single PDF file; this page extraction method is used in the 'process_pdf' function which also encapsulates the full pipeline of operations including splitting PDF into single page PDFs, converting each page to PNG, extracting, cleaning, preprocessing and saving different forms of text data. The client version releases a folder structure containing unique directories to store processed pdf pages, images, cleaned texts and preprocessed images and texts.

/n/n